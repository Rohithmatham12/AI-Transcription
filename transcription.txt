 Have you just created the world's greatest react app and are looking to share it with the world? Do you hate setting up complicated web hosting environments like AWS and giving all your money to Jeff Bezos? Well, there's an answer. The beautiful people at GitHub have created a somewhat sort of secret feature called GitHub Pages, which lets you host pretty much any static website for free, including sites built using React. And it can all be done in four simple steps. So let's get started. Step one is to get your React app on GitHub. Here's my cool little note taking out from my last tutorial. And to get on GitHub, I'm going to go to my GitHub profile, go to the plus button in the top right hand corner and press new repository. For my repository name, I'm just going to call this why I call my React app, which was notes, and then go ahead and leave everything else as the default. And then I'm going to press create repository. Now GitHub is going to give us a bunch of instructions on how we can get our code sync to up with our new GitHub repository. But the only one we're really going to need here is this one. Git remote at origin and then a URL. It's just below existing repository from the command line. Now what this line is going to do is it's going to go ahead and tell our local code base where our remote code base in GitHub is. So I'm going to copy this. I'm going to go ahead over to the command line where my React app is currently running in its development environment. Press control C. And then I'm going to go ahead and just paste that line in. Now all I need to do is commit all of my different files and then push it over to GitHub. To do this, I'm going to first add all my files with git add dash a and then git commit dash m and then a string with double quotes. And I can write anything that I want. I'm just going to say initial commit. Then press enter. Now we just need to push all of this up into our GitHub repository. To do this, we're going to type git push dash u origin main. All of these commands will be in the description. Press enter. And now all of our code has been pushed to GitHub. Let's go back to the browser, refresh and we can see that all of our code is successfully in GitHub. Step two, we need to add the final URL of our application into our package.json file in our code base. To do this, open your project inside of your text editor. I'm using Visual Studio code and head over to package.json. At the top of package.json, we're going to add a new key value pair. The key is homepage and the value is our URL. So what is our URL? Our URL actually needs to follow a template set by GitHub pages. You can actually add a custom domain later on, but for this setup, you just need to follow this template. HGTPS, call on slash slash, and then your GitHub username. You can find this by going over to your GitHub account here, and you can see it in the top right hand corner where it says about your repository name and then here. So mine is JR Grimshaw. I'm going to copy this and paste it right in here. HGPS JR Grimshaw. Then it's dot github dot IO forward slash our repository name. Now if you remember, I called my repository the same as my React project, but if you called it differently, you need to use your github repository name. So I just called mine notes slash notes. That is your URL. Don't forget your comma at the end to complete this. Save this and you can move on to the next step. Step three, install the GitHub pages MPM package. Back in our command line again, we need to go ahead and install the MPM package for GitHub pages. What this is going to allow us to do is type a simple command line statement and go ahead and push all of our code up to our live website. To do this, we're going to type MPM install and then GH-pages. And then we're going to save this as a development dependency. To do that, we're going to do dash dash save dash dev press enter and then we're done. Step four, the final step. We're going to add two simple scripts to our package.json so that we can go ahead and run MPM run deploy in our command line and it will send it all up to GitHub pages. To do this, go back to your text editor and go to your package.json file where we added our homepage. We're going to go and scroll down to where it says scripts and we're going to go ahead and add two scripts to the start of this list here. The first one is the pre-deploy. This is where we're going to go ahead and build our React app for production. So we're going to do pre-deploy as our key here and then in our value, we're going to do MPM run build and don't forget your comma at the end. Now we're just going to add one more script below this which is going to be deploy. Now deploy is going to run after pre-deploy once the production build of the React package is done and it's going to go ahead and deploy it to GitHub pages and put our website live. So we're going to write the key deploy and then the value is going to be GH-pages. That package we just installed dash D and build and don't forget your comma on the end and that's all. Go ahead and save that. Check you've written it exactly like this. These scripts will be in the description if you'd rather copy and paste them. Then go ahead and back to your command line and all you need to do now is run one simple command line and all and you can do this whenever you make any changes to your application and that is MPM run deploy. Press enter it will run the pre-deploy and then get her pages built and your website will be live. As you can see GitHub pages has now said that our site's published so what we can go ahead and do is visit that URL we created. I'm going to go over to Visual Studio Code scroll to the top take this URL I generated and copy it. I'm going to go ahead and paste that into my browser and there it is my site is live for everyone to see. Now go share it.